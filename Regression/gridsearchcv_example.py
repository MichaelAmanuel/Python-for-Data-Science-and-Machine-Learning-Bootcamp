# -*- coding: utf-8 -*-
"""GridSearchCV-example.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13U33RqIwDTdQ7gIH8bsjvhtQhy9TtY37
"""

from sklearn.datasets import make_classification
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.model_selection import GridSearchCV

# Generate synthetic data
X, y = make_classification(
                           n_samples=100,
                           n_features=3,
                           n_informative=2,
                           n_redundant=0,
                           n_clusters_per_class=1,
                           random_state=42
                          )

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define the parameter grid
param_grid = {'C': [0.1, 1, 10, 100, 1000], 'gamma': [1, 0.1, 0.01, 0.001, 0.0001]}

# Instantiate the SVC model
svc_model = SVC()

# Instantiate GridSearchCV
grid = GridSearchCV(svc_model, param_grid, verbose=3)

# Fit GridSearchCV
grid.fit(X_train, y_train)

# Get the best parameters
best_params = grid.best_params_
print("Best Parameters:", best_params)

# Get the best estimator
best_model = grid.best_estimator_

# Evaluate the best model
accuracy = best_model.score(X_test, y_test)
print("Accuracy:", accuracy)

# import seaborn as sns
# import matplotlib.pyplot as plt

# # Assuming you have loaded the Iris dataset and filtered it to get only the 'setosa' species as 'setosa'

# sns.kdeplot(data=setosa, x='sepal_width', y='sepal_length', cmap='plasma', shade=True, shade_lowest=False)

# plt.xlabel('Sepal Width')
# plt.ylabel('Sepal Length')
# plt.title('Kernel Density Estimation Plot for Sepal Width vs Sepal Length (Setosa)')
# plt.show()